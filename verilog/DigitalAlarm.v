/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module DIG_CounterPreset #(
    parameter Bits = 2,
    parameter maxValue = 4
)
(
    input C,
    input en,
    input clr,
    input dir,
    input [(Bits-1):0] in,
    input ld,
    output [(Bits-1):0] out,
    output ovf
);

    reg [(Bits-1):0] count = 'h0;

    function [(Bits-1):0] maxVal (input [(Bits-1):0] maxv);
        if (maxv == 0)
            maxVal = (1 << Bits) - 1;
        else
            maxVal = maxv;
    endfunction

    assign out = count;
    assign ovf = ((count == maxVal(maxValue) & dir == 1'b0)
                  | (count == 'b0 & dir == 1'b1))? en : 1'b0;

    always @ (posedge C) begin
        if (clr == 1'b1)
            count <= 'h0;
        else if (ld == 1'b1)
            count <= in;
        else if (en == 1'b1) begin
            if (dir == 1'b0) begin
                if (count == maxVal(maxValue))
                    count <= 'h0;
                else
                    count <= count + 1'b1;
            end
            else begin
                if (count == 'h0)
                    count <= maxVal(maxValue);
                else
                    count <= count - 1;
            end
        end
    end
endmodule


module ClockDev (
  input EN,
  input CLR,
  input CLK,
  output [5:0] SEC,
  output [5:0] MIN,
  output [4:0] HOUR
);
  wire s0;
  wire s1;
  // SECONDS
  DIG_CounterPreset #(
    .Bits(6),
    .maxValue(60)
  )
  DIG_CounterPreset_i0 (
    .en( EN ),
    .C( CLK ),
    .dir( 1'b0 ),
    .in( 6'b0 ),
    .ld( 1'b0 ),
    .clr( CLR ),
    .out( SEC ),
    .ovf( s0 )
  );
  // MINUTES
  DIG_CounterPreset #(
    .Bits(6),
    .maxValue(60)
  )
  DIG_CounterPreset_i1 (
    .en( s0 ),
    .C( CLK ),
    .dir( 1'b0 ),
    .in( 6'b0 ),
    .ld( 1'b0 ),
    .clr( CLR ),
    .out( MIN ),
    .ovf( s1 )
  );
  // HOURS
  DIG_CounterPreset #(
    .Bits(5),
    .maxValue(24)
  )
  DIG_CounterPreset_i2 (
    .en( s1 ),
    .C( CLK ),
    .dir( 1'b0 ),
    .in( 5'b0 ),
    .ld( 1'b0 ),
    .clr( CLR ),
    .out( HOUR )
  );
endmodule
module LUT_DECODER (
    input \0 ,
    input \1 ,
    input \2 ,
    input \3 ,
    output reg  [6:0]  out
);
    reg [6:0] my_lut [0:15];
    wire [3:0] temp;
    assign temp = {\3 , \2 , \1 , \0 };

    always @ (*) begin
       out = my_lut[temp];
    end

    initial begin
        my_lut[0] = 7'h7e;
        my_lut[1] = 7'h30;
        my_lut[2] = 7'h35;
        my_lut[3] = 7'h79;
        my_lut[4] = 7'h33;
        my_lut[5] = 7'h5b;
        my_lut[6] = 7'h5f;
        my_lut[7] = 7'h70;
        my_lut[8] = 7'h7f;
        my_lut[9] = 7'h7b;
        my_lut[10] = 7'h7e;
        my_lut[11] = 7'h30;
        my_lut[12] = 7'h35;
        my_lut[13] = 7'h79;
        my_lut[14] = 7'h33;
        my_lut[15] = 7'h5b;
    end
endmodule


module SevenSegmentDecoder (
  input IN_0,
  input IN_1,
  input IN_2,
  input IN_3,
  output A,
  output B,
  output C,
  output D,
  output E,
  output F,
  output G
);
  wire [6:0] s0;
  // DECODER
  LUT_DECODER LUT_DECODER_i0 (
    .\0 ( IN_0 ),
    .\1 ( IN_1 ),
    .\2 ( IN_2 ),
    .\3 ( IN_3 ),
    .out( s0 )
  );
  assign A = s0[0];
  assign B = s0[1];
  assign C = s0[2];
  assign D = s0[3];
  assign E = s0[4];
  assign F = s0[5];
  assign G = s0[6];
endmodule

module DigitalAlarm (
  input CLK,
  input INC,
  input SET,
  input CLR,
  output MIN_SEG_2_A,
  output MIN_SEG_2B,
  output MIN_SEG_2C,
  output MIN_SEG_2D,
  output MIN_SEG_2E,
  output MIN_SEG_2F,
  output MIN_SEG_2G,
  output MIN_SEG_1A,
  output MIN_SEG_1B,
  output MIN_SEG_1C,
  output MIN_SEG_1D,
  output MIN_SEG_1E,
  output MIN_SEG_1F,
  output MIN_SEG_1G,
  output SEC_SEG_2_A,
  output SEC_SEG_2B,
  output SEC_SEG_2C,
  output SEC_SEG_2D,
  output SEC_SEG_2E,
  output SEC_SEG_2F,
  output SEC_SEG_2G,
  output SEC_SEG_1A,
  output SEC_SEG_1B,
  output SEC_SEG_1C,
  output SEC_SEG_1D,
  output SEC_SEG_1E,
  output SEC_SEG_1F,
  output SEC_SEG_1G,
  output HOUR_SEG_2_A,
  output HOUR_SEG_2B,
  output HOUR_SEG_2C,
  output HOUR_SEG_2D,
  output HOUR_SEG_2E,
  output HOUR_SEG_2F,
  output HOUR_SEG_2G,
  output HOUR_SEG_1A,
  output HOUR_SEG_1B,
  output HOUR_SEG_1C,
  output HOUR_SEG_1D,
  output HOUR_SEG_1E,
  output HOUR_SEG_1F,
  output HOUR_SEG_1G
);
  wire s0;
  wire [5:0] s1;
  wire [5:0] s2;
  wire [4:0] s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire s20;
  assign s0 = ((CLK & ~ SET) | (SET & INC));
  ClockDev ClockDev_i0 (
    .EN( 1'b1 ),
    .CLR( CLR ),
    .CLK( s0 ),
    .SEC( s1 ),
    .MIN( s2 ),
    .HOUR( s3 )
  );
  assign s4 = s2[0];
  assign s5 = s2[1];
  assign s6 = s2[2];
  assign s7 = s2[3];
  assign s8 = s2[4];
  assign s9 = s2[5];
  assign s10 = s1[0];
  assign s11 = s1[1];
  assign s12 = s1[2];
  assign s13 = s1[3];
  assign s14 = s1[4];
  assign s15 = s1[5];
  assign s16 = s3[0];
  assign s17 = s3[1];
  assign s18 = s3[2];
  assign s19 = s3[3];
  assign s20 = s3[4];
  SevenSegmentDecoder SevenSegmentDecoder_i1 (
    .IN_0( s4 ),
    .IN_1( s5 ),
    .IN_2( s6 ),
    .IN_3( s7 ),
    .A( MIN_SEG_2_A ),
    .B( MIN_SEG_2B ),
    .C( MIN_SEG_2C ),
    .D( MIN_SEG_2D ),
    .E( MIN_SEG_2E ),
    .F( MIN_SEG_2F ),
    .G( MIN_SEG_2G )
  );
  SevenSegmentDecoder SevenSegmentDecoder_i2 (
    .IN_0( s7 ),
    .IN_1( s8 ),
    .IN_2( s9 ),
    .IN_3( 1'b0 ),
    .A( MIN_SEG_1A ),
    .B( MIN_SEG_1B ),
    .C( MIN_SEG_1C ),
    .D( MIN_SEG_1D ),
    .E( MIN_SEG_1E ),
    .F( MIN_SEG_1F ),
    .G( MIN_SEG_1G )
  );
  SevenSegmentDecoder SevenSegmentDecoder_i3 (
    .IN_0( s10 ),
    .IN_1( s11 ),
    .IN_2( s12 ),
    .IN_3( s13 ),
    .A( SEC_SEG_2_A ),
    .B( SEC_SEG_2B ),
    .C( SEC_SEG_2C ),
    .D( SEC_SEG_2D ),
    .E( SEC_SEG_2E ),
    .F( SEC_SEG_2F ),
    .G( SEC_SEG_2G )
  );
  SevenSegmentDecoder SevenSegmentDecoder_i4 (
    .IN_0( s13 ),
    .IN_1( s14 ),
    .IN_2( s15 ),
    .IN_3( 1'b0 ),
    .A( SEC_SEG_1A ),
    .B( SEC_SEG_1B ),
    .C( SEC_SEG_1C ),
    .D( SEC_SEG_1D ),
    .E( SEC_SEG_1E ),
    .F( SEC_SEG_1F ),
    .G( SEC_SEG_1G )
  );
  SevenSegmentDecoder SevenSegmentDecoder_i5 (
    .IN_0( s16 ),
    .IN_1( s17 ),
    .IN_2( s18 ),
    .IN_3( s19 ),
    .A( HOUR_SEG_2_A ),
    .B( HOUR_SEG_2B ),
    .C( HOUR_SEG_2C ),
    .D( HOUR_SEG_2D ),
    .E( HOUR_SEG_2E ),
    .F( HOUR_SEG_2F ),
    .G( HOUR_SEG_2G )
  );
  SevenSegmentDecoder SevenSegmentDecoder_i6 (
    .IN_0( s19 ),
    .IN_1( s20 ),
    .IN_2( 1'b0 ),
    .IN_3( 1'b0 ),
    .A( HOUR_SEG_1A ),
    .B( HOUR_SEG_1B ),
    .C( HOUR_SEG_1C ),
    .D( HOUR_SEG_1D ),
    .E( HOUR_SEG_1E ),
    .F( HOUR_SEG_1F ),
    .G( HOUR_SEG_1G )
  );
endmodule
